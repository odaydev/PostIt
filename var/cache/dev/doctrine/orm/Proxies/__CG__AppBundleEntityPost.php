<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Post extends \AppBundle\Entity\Post implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'categorie', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'titlePost', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'imagePost', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'textePost', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'users', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'commentaires', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'created', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'keywords', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'likePost'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'categorie', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'titlePost', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'imagePost', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'textePost', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'users', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'commentaires', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'created', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'keywords', '' . "\0" . 'AppBundle\\Entity\\Post' . "\0" . 'likePost'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Post $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategorie($categorie)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategorie', [$categorie]);

        return parent::setCategorie($categorie);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategorie()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategorie', []);

        return parent::getCategorie();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitlePost($titlePost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitlePost', [$titlePost]);

        return parent::setTitlePost($titlePost);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitlePost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitlePost', []);

        return parent::getTitlePost();
    }

    /**
     * {@inheritDoc}
     */
    public function setImagePost($imagePost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImagePost', [$imagePost]);

        return parent::setImagePost($imagePost);
    }

    /**
     * {@inheritDoc}
     */
    public function getImagePost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImagePost', []);

        return parent::getImagePost();
    }

    /**
     * {@inheritDoc}
     */
    public function setTextePost($textePost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTextePost', [$textePost]);

        return parent::setTextePost($textePost);
    }

    /**
     * {@inheritDoc}
     */
    public function getTextePost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTextePost', []);

        return parent::getTextePost();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsers(\AppBundle\Entity\Users $users)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsers', [$users]);

        return parent::setUsers($users);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', []);

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setKeywords($keywords)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKeywords', [$keywords]);

        return parent::setKeywords($keywords);
    }

    /**
     * {@inheritDoc}
     */
    public function getKeywords()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKeywords', []);

        return parent::getKeywords();
    }

    /**
     * {@inheritDoc}
     */
    public function setLikePost($likePost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLikePost', [$likePost]);

        return parent::setLikePost($likePost);
    }

    /**
     * {@inheritDoc}
     */
    public function getLikePost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLikePost', []);

        return parent::getLikePost();
    }

    /**
     * {@inheritDoc}
     */
    public function addCommentaire(\AppBundle\Entity\Commentaires $commentaire)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCommentaire', [$commentaire]);

        return parent::addCommentaire($commentaire);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCommentaire(\AppBundle\Entity\Commentaires $commentaire)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCommentaire', [$commentaire]);

        return parent::removeCommentaire($commentaire);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentaires()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentaires', []);

        return parent::getCommentaires();
    }

}
